#!/usr/bin/env python

import os
import sys
import sysconfig
from setuptools import setup, Extension
from Cython.Build import cythonize
from Cython.Compiler.Main import default_options
import numpy

default_options['compile_time_env'] = {'CAPNP': @CAPNP_FLAG@}

extra_link_args = []
extra_compile_args = ['-std=c++17']

root = '@CMAKE_INSTALL_PREFIX@'

print('Detected platform: ' + sys.platform)
print('Detected system: ' + sysconfig.get_platform())

stalib_ext = ''
dynlib_ext = ''
if sys.platform.lower().startswith('linux'):
    stalib_ext = 'a'
    dynlib_ext = 'so'
elif sys.platform.lower() == 'darwin':
    stalib_ext = 'a'
    dynlib_ext = 'dylib'
    # On Mac OS we have to force setting of rpath
    extra_link_args.append('-Wl,-rpath,{}'.format(os.path.join(root, 'lib')))

uda_lib_names = '@UDA_LIBS@'.split(';') if '@UDA_LIBS@' else []
build_fat = os.environ.get('UDA_FAT_PYTHON', False)
if build_fat:
    uda_libs = [
        'fat@PROJECT_NAME@_client',
        '@PROJECT_NAME@_plugins',
    ] + ['@PROJECT_NAME@_' + name for name in uda_lib_names]
    extra_libs = ['xml2']
    extra_libs.extend('@EXTRA_LIBS@'.split(';') if '@EXTRA_LIBS@' else [])
    extra_macros = [('FATCLIENT', None)]
else:
    uda_libs = [
        '@PROJECT_NAME@_client',
    ] + ['@PROJECT_NAME@_' + name for name in uda_lib_names]
    extra_libs = '@EXTRA_LIBS@'.split(';') if '@EXTRA_LIBS@' else []
    extra_macros = []

uda_static_libs = [os.path.join(root, 'lib', 'lib' + lib + '_static.' + stalib_ext) for lib in uda_libs]
uda_shared_libs = uda_libs

# Decide whether to build against shared or static UDA libraries
if os.environ.get('UDA_PYTHON_STATIC', True):
    print("Building against static UDA libraries")
    libraries = ['ssl', 'crypto', 'xml2'] + extra_libs
    static_libs = uda_static_libs
else:
    print("Building against shared UDA libraries")
    libraries = ['ssl', 'crypto', 'xml2'] + extra_libs + uda_shared_libs
    static_libs = None

ext = Extension(
    'cpyuda',
    ['pyuda/cpyuda/cpyuda.pyx'],
    include_dirs=list(filter(None, [
        '/usr/include/tirpc',
        '@TIRPC_PYUDA_INCLUDE_DIR@',
        '@LIBXML2_INCLUDE_DIR@',
        os.path.join(root, 'include', 'uda'),
        numpy.get_include(),
        '@FMT_INCLUDE_DIR@'
    ])),
    libraries=libraries,
    library_dirs=list(filter(None, [
        '@STDCXX_LIB_DIR@',
        '@OPENSSL_LIB_DIR@',
        '@LIBXML_LIB_DIR@',
        '@CAPNP_LIB_DIR@',
        '@FMT_LIB_DIR@'
    ])),
    runtime_library_dirs=list(filter(None, [
        '@STDCXX_LIB_DIR@',
        '@OPENSSL_LIB_DIR@',
        '@LIBXML_LIB_DIR@',
        '@CAPNP_LIB_DIR@',
        '@FMT_LIB_DIR@'
    ])),
    extra_link_args=extra_link_args,
    extra_compile_args=extra_compile_args,
    extra_objects=static_libs,
    language='c++',
    define_macros=extra_macros,
)


def get_version(v):
    if v.count('.') > 2:
        v = ".Post".join(v.rsplit('.', 1))
    print("setup version = %s" % v)
    return v


setup(
    name='uda',
    version=get_version('@PROJECT_VERSION@'),
    description='Unified Data Access (UDA)',
    long_description='Unified Data Access (UDA)',
    author='Jonathan Hollocombe',
    author_email='jonathan.hollocombe@ukaea.uk',
    packages=['pyuda', 'uda'],
    ext_modules=cythonize([ext]),
)
